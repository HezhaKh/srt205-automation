---
# auditd & rsyslog & unattended-upgrades
- name: Ensure auditd is enabled and running
  ansible.builtin.systemd:
    name: auditd
    state: started
    enabled: true

- name: Ensure rsyslog is enabled and running
  ansible.builtin.systemd:
    name: rsyslog
    state: started
    enabled: true

- name: Ensure unattended-upgrades service is enabled
  ansible.builtin.systemd:
    name: unattended-upgrades
    state: started
    enabled: true
# UFW — idempotent

# IMPORTANT: use verbose so we can see the "Default:" line
- name: Check UFW status (verbose)
  ansible.builtin.command: ufw status verbose
  register: ufw_status
  changed_when: false

- name: Reset UFW rules (only when needed)
  ansible.builtin.command: ufw --force reset
  when: "'Status: inactive' in ufw_status.stdout"

# Only set the default policy if it's not already deny
- name: Set default deny inbound
  ansible.builtin.command: ufw dfault deny incoming
  when: ufw_status.stdout is not search('Default:\\s+deny\\s+\\(incoming\\)')

# Allow SSH — mark changed only when a rule is actually added
- name: Allow SSH port
  ansible.builtin.command: "ufw allow {{ cis_ssh_port | default(22) }}/tcp"
  register: ufw_allow_ssh
  changed_when: "'Skipping adding existing rule' not in ufw_allow_ssh.stdout"

# Enable UFW only if it's inactive
- name: Enable UFW (only if inactive)
  ansible.builtin.command: ufw --force enable
  when: ufw_status.stdout is search('(?m)^Status:\s+inactive')

# Audit
- name: Audit UFW status
  ansible.builtin.command: ufw status verbose
  register: ufw_status
  changed_when: false

# Restrict cron/at access 
- name: Remove cron.deny and at.deny
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/cron.deny
    - /etc/at.deny
  when: cis_mode == 'enforce'

- name: Ensure cron.allow exists and only allows root
  ansible.builtin.copy:
    dest: /etc/cron.allow
    content: "root\n"
    owner: root
    group: root
    mode: "0600"
    backup: yes
  when: cis_mode == 'enforce'

- name: Ensure at.allow exists and only allows root
  ansible.builtin.copy:
    dest: /etc/at.allow
    content: "root\n"
    owner: root
    group: root
    mode: "0600"
    backup: yes
  when: cis_mode == 'enforce'

# Audit
- name: Audit cron/at allow/deny
  ansible.builtin.shell: |
    ls -l /etc/cron.allow /etc/at.allow 2>/dev/null || true
  args: { executable: /bin/bash }
  register: _cron_at
  changed_when: false

# Enforce /tmp mount options
- name: Check if /tmp has an fstab entry
  ansible.builtin.shell: "awk '$2==\"/tmp\" {print $0}' /etc/fstab | head -n1"
  args: { executable: /bin/bash }
  register: _fstab_tmp
  changed_when: false

- name: Update /tmp options in /etc/fstab to include nodev,nosuid,noexec
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '(^\\S+\\s+/tmp\\s+\\S+\\s+)([^\\s]+)'
    replace: '\\1{{ (\"nodev,nosuid,noexec\" if \"nodev\" not in _fstab_tmp.stdout and \"nosuid\" not in _fstab_tmp.stdout and \"noexec\" not in _fstab_tmp.stdout else \"\") | ternary(( (_fstab_tmp.stdout.split()[3] if _fstab_tmp.stdout else \"defaults\") ~ \",nodev,nosuid,noexec\"), (_fstab_tmp.stdout.split()[3] if _fstab_tmp.stdout else \"defaults\")) }}'
    backup: yes
  when:
    - cis_mode == 'enforce'
    - _fstab_tmp.stdout | length > 0

- name: Remount /tmp with secure options
  ansible.builtin.mount:
    path: /tmp
    state: remounted
  when:
    - cis_mode == 'enforce'
    - _fstab_tmp.stdout | length > 0

# Audit
- name: Audit /tmp mount options
  ansible.builtin.command: findmnt -no OPTIONS /tmp
  register: _tmp_mount
  changed_when: false
  failed_when: false

# Ensure a single time sync daemon is in use
- name: Enable and start systemd-timesyncd
  ansible.builtin.systemd:
    name: systemd-timesyncd
    state: started
    enabled: true
  when: cis_mode == 'enforce'

- name: Disable/stop chrony if present
  ansible.builtin.systemd:
    name: chrony
    state: stopped
    enabled: false
  register: _chrony_disable
  failed_when: false
  when: cis_mode == 'enforce'

- name: Disable/stop ntp if present
  ansible.builtin.systemd:
    name: ntp
    state: stopped
    enabled: false
  register: _ntp_disable
  failed_when: false
  when: cis_mode == 'enforce'

# Audit
- name: Audit time sync services
  ansible.builtin.shell: |
    systemctl is-enabled systemd-timesyncd || true
    systemctl is-active systemd-timesyncd || true
    systemctl is-enabled chrony 2>/dev/null || true
    systemctl is-enabled ntp 2>/dev/null || true
  args: { executable: /bin/bash }
  register: _timesync
  changed_when: false


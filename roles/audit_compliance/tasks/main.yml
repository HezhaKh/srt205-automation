---
- name: Determine audit/enforce mode (default = audit)
  ansible.builtin.set_fact:
    ac_mode: "{{ cis_mode | default('audit') }}"

# ---------------------------
# Baselines (override via ac_sysctl_overrides / ac_file_overrides)
# ---------------------------

- name: Define sysctl defaults
  ansible.builtin.set_fact:
    _ac_sysctl_defaults:
      net.ipv4.ip_forward: 0
      net.ipv4.conf.all.accept_redirects: 0
      net.ipv4.conf.default.accept_redirects: 0
      net.ipv4.conf.all.send_redirects: 0
      net.ipv4.conf.default.send_redirects: 0
      net.ipv4.conf.all.accept_source_route: 0
      net.ipv4.conf.default.accept_source_route: 0
      net.ipv4.icmp_echo_ignore_broadcasts: 1
      net.ipv4.icmp_ignore_bogus_error_responses: 1
      net.ipv4.tcp_syncookies: 1
      kernel.randomize_va_space: 2
      fs.suid_dumpable: 0

- name: Build sysctl target map (allow overrides)
  ansible.builtin.set_fact:
    ac_sysctl_targets: "{{ _ac_sysctl_defaults | combine(ac_sysctl_overrides | default({}), recursive=False) }}"

- name: Define file permission defaults
  ansible.builtin.set_fact:
    _ac_file_defaults:
      - path: /etc/passwd
        mode: "0644"
        owner: root
        group: root
      - path: /etc/shadow
        mode: "0600"
        owner: root
        group: root
      - path: /etc/group
        mode: "0644"
        owner: root
        group: root

- name: Build file target list (allow overrides)
  ansible.builtin.set_fact:
    ac_file_targets: "{{ ac_file_overrides | default(_ac_file_defaults) }}"

# ---------------------------
# Enforce (only when cis_mode=enforce)
# ---------------------------

- name: Enforce sysctl baseline
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_set: true
    reload: true
  loop: "{{ ac_sysctl_targets | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: ac_mode == 'enforce'

- name: Enforce critical file ownership/permissions
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop: "{{ ac_file_targets }}"
  loop_control:
    label: "{{ item.path }}"
  when: ac_mode == 'enforce'

# ---------------------------
# Audit (always run for reporting)
# ---------------------------

- name: Audit sysctl values
  ansible.builtin.command: "sysctl -n {{ item.key }}"
  changed_when: false
  failed_when: false
  register: ac_sysctl_audit_results
  loop: "{{ ac_sysctl_targets | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Collate noncompliant sysctl entries
  ansible.builtin.set_fact:
    ac_sysctl_noncompliant: "{{ (ac_sysctl_noncompliant | default([])) + [ {
      'key': item.item.key,
      'expected': item.item.value | string,
      'actual': item.stdout | default('N/A')
    } ] }}"
  when: (item.stdout | default('')) != (item.item.value | string)
  loop: "{{ ac_sysctl_audit_results.results }}"
  loop_control:
    label: "{{ item.item.key }}"

- name: Audit file permissions/ownership
  ansible.builtin.stat:
    path: "{{ item.path }}"
    follow: false
  register: ac_file_stats
  loop: "{{ ac_file_targets }}"
  loop_control:
    label: "{{ item.path }}"

- name: Collate noncompliant files
  vars:
    expected: "{{ (ac_file_targets | selectattr('path','equalto', item.stat.path) | first) }}"
  ansible.builtin.set_fact:
    ac_file_noncompliant: "{{ (ac_file_noncompliant | default([])) + [ {
      'path': item.stat.path,
      'expected': expected,
      'actual': { 'owner': item.stat.pw_name, 'group': item.stat.gr_name, 'mode': item.stat.mode }
    } ] }}"
  when: >
    item.stat.exists and (
      item.stat.pw_name != expected.owner or
      item.stat.gr_name != expected.group or
      item.stat.mode    != expected.mode
    )
  loop: "{{ ac_file_stats.results }}"
  loop_control:
    label: "{{ item.stat.path }}"

# ---------------------------
# Report & Summary
# ---------------------------

- name: Build compliance report
  ansible.builtin.set_fact:
    ac_report:
      mode: "{{ ac_mode }}"
      sysctl_checked: "{{ ac_sysctl_targets | length }}"
      sysctl_noncompliant: "{{ ac_sysctl_noncompliant | default([]) }}"
      files_checked: "{{ ac_file_targets | length }}"
      file_noncompliant: "{{ ac_file_noncompliant | default([]) }}"

- name: Write compliance report to /var/tmp
  ansible.builtin.copy:
    dest: /var/tmp/audit_compliance_report.json
    owner: root
    group: root
    mode: "0644"
    content: "{{ ac_report | to_nice_json }}"

- name: Summary
  ansible.builtin.debug:
    msg:
      - "audit_compliance mode: {{ ac_mode }}"
      - "Sysctl checked: {{ ac_sysctl_targets | length }}, noncompliant: {{ (ac_sysctl_noncompliant | default([])) | length }}"
      - "Files checked:  {{ ac_file_targets | length }}, noncompliant: {{ (ac_file_noncompliant | default([])) | length }}"
      - "Report: /var/tmp/audit_compliance_report.json"

- name: Fail if drift remains in enforce mode
  ansible.builtin.fail:
    msg: "Noncompliance detected in enforce mode. See /var/tmp/audit_compliance_report.json."
  when: ac_mode == 'enforce' and (
          (ac_sysctl_noncompliant | default([])) | length > 0 or
          (ac_file_noncompliant | default([])) | length > 0
        )

- name: Ensure report directory exists (controller)
  delegate_to: localhost
  run_once: true
  file:
    path: "{{ ac_report_dir_controller }}"
    state: directory
    mode: "0755"

#- name: Render Markdown report (controller)
#  delegate_to: localhost
#  template:
#    src: compliance_report.j2
#    dest: "{{ ac_report_path_controller }}"
#  vars:
#    cis_mode: "{{ ac_mode }}"

# --- Pull JSON from the host and render a local Markdown report ---
- name: Read audit_compliance JSON from the host
  ansible.builtin.slurp:
    src: /var/tmp/audit_compliance_report.json
  register: ac_report_slurp

- name: Parse audit_compliance JSON
  ansible.builtin.set_fact:
    ac_report_parsed: "{{ ac_report_slurp.content | b64decode | from_json }}"

- name: Ensure local reports dir exists
  ansible.builtin.file:
    path: "{{ playbook_dir }}/reports"
    state: directory
  delegate_to: localhost
  run_once: true

#- name: Render audit_compliance Markdown report (controller)
#  ansible.builtin.template:
#    src: compliance_report.j2
#    dest: "{{ playbook_dir }}/reports/audit_compliance_{{ inventory_hostname }}_{{ ansible_date_time.date }}.md"
#  vars:
#    ac: "{{ ac_report_parsed }}"
#  delegate_to: localhost

